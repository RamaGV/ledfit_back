import mongoose from 'mongoose';
import dotenv from 'dotenv';
import path from 'path';

// Cargar variables de entorno
dotenv.config();

// Conectar a MongoDB
async function connectDB() {
  try {
    const mongoURI = process.env.MONGO_URI;
    if (!mongoURI) {
      throw new Error('MONGO_URI no est√° definido en las variables de entorno');
    }
    
    await mongoose.connect(mongoURI);
    console.log('üìä Conexi√≥n a MongoDB establecida');
  } catch (error) {
    console.error('‚ùå Error al conectar a MongoDB:', error instanceof Error ? error.message : 'Error desconocido');
    process.exit(1);
  }
}

// Actualizar URLs de im√°genes en ejercicios
async function updateEjerciciosUrls() {
  if (!mongoose.connection || !mongoose.connection.db) {
    throw new Error('No hay conexi√≥n a la base de datos');
  }
  
  const db = mongoose.connection.db;
  const ejercicios = db.collection('ejercicios');
  
  const ejerciciosCount = await ejercicios.countDocuments();
  console.log(`üìã Total de ejercicios encontrados: ${ejerciciosCount}`);
  
  // Actualizar todos los ejercicios con URLs de im√°genes PNG a WebP
  const updateResult = await ejercicios.updateMany(
    { imagen: { $regex: '\\.png$' } },
    [{ $set: { imagen: { $replaceAll: { input: '$imagen', find: '.png', replacement: '.webp' } } } }]
  );
  
  console.log(`‚úÖ Ejercicios actualizados: ${updateResult.modifiedCount}`);
}

// Actualizar URLs de im√°genes en entrenamientos
async function updateEntrenamientosUrls() {
  if (!mongoose.connection || !mongoose.connection.db) {
    throw new Error('No hay conexi√≥n a la base de datos');
  }
  
  const db = mongoose.connection.db;
  const entrenamientos = db.collection('entrenamientos');
  
  const entrenamientosCount = await entrenamientos.countDocuments();
  console.log(`üìã Total de entrenamientos encontrados: ${entrenamientosCount}`);
  
  // Actualizar todos los entrenamientos con URLs de im√°genes PNG a WebP
  const updateResult = await entrenamientos.updateMany(
    { imagen: { $regex: '\\.png$' } },
    [{ $set: { imagen: { $replaceAll: { input: '$imagen', find: '.png', replacement: '.webp' } } } }]
  );
  
  console.log(`‚úÖ Entrenamientos actualizados: ${updateResult.modifiedCount}`);
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando actualizaci√≥n de URLs de im√°genes de PNG a WebP...');
  
  // Conectar a la base de datos
  await connectDB();
  
  try {
    // Actualizar URLs en las diferentes colecciones
    await updateEjerciciosUrls();
    await updateEntrenamientosUrls();
    
    console.log('‚ú® Proceso de actualizaci√≥n completado con √©xito');
  } catch (error) {
    console.error('‚ùå Error durante la actualizaci√≥n:', error instanceof Error ? error.message : 'Error desconocido');
  } finally {
    // Cerrar conexi√≥n a MongoDB
    await mongoose.disconnect();
    console.log('üìä Conexi√≥n a MongoDB cerrada');
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Error fatal:', error instanceof Error ? error.message : 'Error desconocido');
    process.exit(1);
  });
}

export { main as updateImageUrls }; 